# This workflow requires Ubuntu 22.04 or 24.04

name: Auto Release & Tag

on:
  push:
    branches:
      - master
      - main
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - ".gitignore"
  workflow_call: {}

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  pre_job:
    runs-on: ubuntu-22.04
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5.3.0
        with:
          cancel_others: "true"
          concurrent_skipping: "same_content"

  create-release:
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    outputs:
      version: ${{ steps.prepare_release.outputs.version }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21"
          check-latest: true
          cache: true

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/.cache/git
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Prepare Release
        id: prepare_release
        run: |
          set -euo pipefail
          git fetch --tags --force
          latest_tag=$(git tag -l 'v*' --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            new_version="v0.1.0"
          else
            major=$(echo $latest_tag | cut -d. -f1)
            minor=$(echo $latest_tag | cut -d. -f2)
            patch=$(echo $latest_tag | cut -d. -f3)
            new_patch=$((patch + 1))
            new_version="$major.$minor.$new_patch"
          fi
          echo "version=$new_version" >> "$GITHUB_OUTPUT"
          echo "Generated version: $new_version"

      - name: Validate Version
        run: |
          set -euo pipefail
          new_version="${{ steps.prepare_release.outputs.version }}"
          echo "Validating version: $new_version"
          if [[ ! $new_version =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format: $new_version"
            exit 1
          fi
          major=$(echo $new_version | cut -d. -f1 | tr -d 'v')
          minor=$(echo $new_version | cut -d. -f2)
          patch=$(echo $new_version | cut -d. -f3)
          if [[ $major -gt 99 || $minor -gt 99 || $patch -gt 999 ]]; then
            echo "::error::Version numbers out of valid range"
            exit 1
          fi
          echo "Version validation passed"

      - name: Check Dependencies
        run: |
          go mod verify
          go mod download
          if [ -d "vendor" ]; then
            go mod vendor
          fi

      - name: Prepare Build Environment
        run: |
          echo "Building version: ${{ steps.prepare_release.outputs.version }}"
          echo "GOOS=${GOOS:-$(go env GOOS)}" >> $GITHUB_ENV
          echo "GOARCH=${GOARCH:-$(go env GOARCH)}" >> $GITHUB_ENV
          echo "GO111MODULE=on" >> $GITHUB_ENV

      - name: Cleanup Workspace
        run: |
          rm -rf /tmp/go/
          rm -rf .cache/
          rm -rf dist/
          git clean -fdx
          git status

      - name: Build Release
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --timeout 60m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.prepare_release.outputs.version }}
          CGO_ENABLED: 0
          GOPATH: /tmp/go
          GOCACHE: /tmp/.cache/go-build
          GOMODCACHE: /tmp/go/pkg/mod
          GORELEASER_DEBUG: 1
          GORELEASER_CURRENT_TAG: ${{ steps.prepare_release.outputs.version }}
          BUILD_TIME: ${{ steps.prepare_release.outputs.version }}
          BUILD_COMMIT: ${{ github.sha }}

      - name: Verify Release
        run: |
          echo "Verifying release artifacts..."
          if [ ! -d "dist" ]; then
            echo "::error::Release artifacts not found"
            exit 1
          fi
          for file in dist/cursor-id-modifier_*; do
            if [ -f "$file" ]; then
              echo "Verifying: $file"
              if [[ "$file" == *.exe ]]; then
                if ! [ -x "$file" ]; then
                  echo "::error::$file is not executable"
                  exit 1
                fi
              else
                if ! [ -x "$file" ]; then
                  echo "::error::$file is not executable"
                  exit 1
                fi
              fi
            fi
          done

      - name: Create Tag
        if: success()
        run: |
          new_version=${{ steps.prepare_release.outputs.version }}
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag -a $new_version -m "Release $new_version"
          git push origin $new_version

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.prepare_release.outputs.version }}
          name: Release ${{ steps.prepare_release.outputs.version }}
          files: dist/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
