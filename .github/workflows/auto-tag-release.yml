# This workflow requires Ubuntu 22.04 or 24.04

name: Auto Tag & Release

on:
  push:
    branches:
      - master
      - main
    tags:
      - "v*"
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - ".gitignore"
  workflow_call: {}

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  pre_job:
    runs-on: ubuntu-22.04
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5.3.0
        with:
          cancel_others: "true"
          concurrent_skipping: "same_content"

  auto-tag-release:
    needs: pre_job
    if: |
      needs.pre_job.outputs.should_skip != 'true' ||
      startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    outputs:
      version: ${{ steps.get_latest_tag.outputs.version }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.21"
          check-latest: true
          cache: true

      - name: Install AppImage dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get latest tag
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        id: get_latest_tag
        run: |
          set -euo pipefail
          git fetch --tags --force
          latest_tag=$(git tag -l 'v*' --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            new_version="v0.1.0"
          else
            major=$(echo $latest_tag | cut -d. -f1)
            minor=$(echo $latest_tag | cut -d. -f2)
            patch=$(echo $latest_tag | cut -d. -f3)
            new_patch=$((patch + 1))
            new_version="$major.$minor.$new_patch"
          fi
          echo "version=$new_version" >> "$GITHUB_OUTPUT"
          echo "Generated version: $new_version"

      - name: Create new tag
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_tag=${{ steps.get_latest_tag.outputs.version }}
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag -a $new_tag -m "Release $new_tag"
          git push origin $new_tag

      - name: Prepare for release
        run: |
          go mod tidy
          go mod download

      - name: Run GoReleaser
        if: ${{ startsWith(github.ref, 'refs/tags/v') || (success() && steps.get_latest_tag.outputs.version != '') }}
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.get_latest_tag.outputs.version }}
          CGO_ENABLED: 0

      - name: Build Summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Go Version: $(go version)" >> $GITHUB_STEP_SUMMARY
          echo "- Release Version: ${VERSION:-N/A}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          if [ -d "dist" ]; then
            echo "### Generated Artifacts" >> $GITHUB_STEP_SUMMARY
            ls -lh dist/ | awk '{print "- "$9" ("$5")"}' >> $GITHUB_STEP_SUMMARY
          fi
